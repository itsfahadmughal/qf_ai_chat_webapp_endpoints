generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // pooled
  directUrl = env("DIRECT_URL") // direct
}

enum Provider {
  openai
  deepseek
  perplexity
  brevo
}

enum UserRole {
  author
  reader
}

model Hotel {
  id                      String                    @id @default(cuid())
  name                    String
  isActive                Boolean                   @default(true)
  createdAt               DateTime                  @default(now())
  users                   User[]
  departments             Department[]
  providers               HotelProviderToggle[]
  conversations           Conversation[]
  prompts                 Prompt[]
  HotelProviderCredential HotelProviderCredential[]
  MCPServer               MCPServer[]
  promptCategories        PromptCategory[]
  vectorStores            HotelVectorStore[]
}

model HotelProviderToggle {
  id           String   @id @default(cuid())
  hotelId      String
  hotel        Hotel    @relation(fields: [hotelId], references: [id])
  provider     Provider
  isEnabled    Boolean  @default(true)
  defaultModel String?

  @@unique([hotelId, provider])
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  passwordHash       String
  role               UserRole             @default(reader)
  isActive           Boolean              @default(true)
  hotelId            String
  hotel              Hotel                @relation(fields: [hotelId], references: [id])
  departmentId       String?
  department         Department?          @relation(fields: [departmentId], references: [id])
  createdAt          DateTime             @default(now())
  conversations      Conversation[]
  prompts            Prompt[]
  assignedPrompts    Prompt[]             @relation("PromptAssignedUser")
  preference         UserPreference?      @relation("UserPreference_user")
  PasswordResetToken PasswordResetToken[]
  EmailOtp           EmailOtp[]
  MessageFeedback    MessageFeedback[]
  ToolCallLog        ToolCallLog[]
  PromptFeedback     PromptFeedback[]
}

model Conversation {
  id          String        @id @default(cuid())
  title       String?
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  hotelId     String
  hotel       Hotel         @relation(fields: [hotelId], references: [id])
  promptId    String?
  prompt      Prompt?       @relation(fields: [promptId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  provider    Provider
  model       String
  archived    Boolean       @default(false)
  messages    Message[]
  ToolCallLog ToolCallLog[]
}

model Message {
  id               String            @id @default(cuid())
  role             String // "system" | "user" | "assistant" | "tool"
  content          String
  createdAt        DateTime          @default(now())
  conversationId   String
  conversation     Conversation      @relation(fields: [conversationId], references: [id])
  promptTokens     Int?
  completionTokens Int?
  totalTokens      Int?
  MessageFeedback  MessageFeedback[]
}

model PromptCategory {
  id      String   @id @default(cuid())
  hotelId String
  hotel   Hotel    @relation(fields: [hotelId], references: [id])
  name    String
  prompts Prompt[]

  @@unique([hotelId, name]) // used by upsert
}

model Prompt {
  id         String           @id @default(cuid())
  hotelId    String
  hotel      Hotel            @relation(fields: [hotelId], references: [id])
  authorId   String
  author     User             @relation(fields: [authorId], references: [id])
  assignedUserId     String?
  assignedUser       User?            @relation("PromptAssignedUser", fields: [assignedUserId], references: [id])
  departmentId       String?
  department         Department?      @relation(fields: [departmentId], references: [id])
  title      String
  body       String // the actual prompt text
  categoryId String?
  category   PromptCategory?  @relation(fields: [categoryId], references: [id]) // relation
  tags       String[]         @default([])
  version    String? // e.g. "v1.2"
  archived   Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  feedback   PromptFeedback[]
  conversations    Conversation[]

  @@index([hotelId, archived])
  @@index([assignedUserId])
  @@index([departmentId])
}

model UserPreference {
  userId String @id
  user   User   @relation("UserPreference_user", fields: [userId], references: [id])

  // user-level provider settings (no A/B)
  enabledProviders Provider[] @default([])
  defaultProvider  Provider?

  modelOpenAI     String?
  modelDeepseek   String?
  modelPerplexity String?

  locale String?
}

model HotelProviderCredential {
  id       String   @id @default(cuid())
  hotelId  String
  hotel    Hotel    @relation(fields: [hotelId], references: [id])
  provider Provider

  // AES-GCM payload
  encKey Bytes // ciphertext
  iv     Bytes // 12 bytes nonce
  tag    Bytes // 16 bytes auth tag

  baseUrl  String? // optional per-hotel override
  label    String? // e.g. "Prod key - 2025-08"
  last4    String // last 4 chars of the original key (for display)
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([hotelId, provider])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([userId, expiresAt])
}

model EmailOtp {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  email      String
  code       String
  purpose    String    @default("generic")
  expiresAt  DateTime
  consumedAt DateTime?
  attempts   Int       @default(0)
  createdAt  DateTime  @default(now())

  @@index([userId, expiresAt])
  @@index([email, createdAt])
}

enum Reaction {
  like
  dislike
}

model MessageFeedback {
  id        String  @id @default(cuid())
  messageId String
  message   Message @relation(fields: [messageId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  reaction  Reaction
  reason    String? // optional quick reason e.g. "irrelevant", "incorrect"
  comment   String? // optional free text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([messageId, userId]) // one reaction per user per message
  @@index([messageId])
  @@index([userId])
}

model PromptFeedback {
  id            String    @id @default(cuid())
  promptId      String
  prompt        Prompt    @relation(fields: [promptId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  feedbackScore Int // 0-100
  reaction      Reaction?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([promptId, userId])
  @@index([promptId])
  @@index([userId])
}

model MCPServer {
  id      String @id @default(cuid())
  hotelId String
  hotel   Hotel  @relation(fields: [hotelId], references: [id])

  name      String
  transport String // "stdio" | "http"
  command   String? // for stdio (e.g., "node" or "tsx")
  args      String[] @default([]) // e.g., ["dist/mcp/servers/energy.js"]
  url       String? // for http transport (optional future)
  isActive  Boolean  @default(true)
  envEnc    String? // encrypted JSON of env vars (optional)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  toolCalls ToolCallLog[]
}

model ToolCallLog {
  id             String    @id @default(cuid())
  hotelId        String
  userId         String
  conversationId String?
  serverId       String
  toolName       String
  args           Json
  result         Json?
  error          String?
  status         String    @default("ok")
  startedAt      DateTime  @default(now())
  finishedAt     DateTime?
  durationMs     Int?
  createdAt      DateTime  @default(now())

  server       MCPServer     @relation(fields: [serverId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  conversation Conversation? @relation(fields: [conversationId], references: [id])

  @@index([hotelId])
  @@index([serverId])
  @@index([conversationId])
}

model HotelVectorStore {
  id        String   @id @default(cuid())
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  provider  Provider @default(openai)
  departmentId String? @unique
  department   Department? @relation(fields: [departmentId], references: [id])
  openaiId  String   @unique
  name      String?
  metadata  Json?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hotelId])
}

model Department {
  id          String             @id @default(cuid())
  hotelId     String
  hotel       Hotel              @relation(fields: [hotelId], references: [id])
  name        String
  description String?
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  users       User[]
  prompts     Prompt[]
  vectorStore HotelVectorStore?

  @@unique([hotelId, name])
  @@index([hotelId])
}
